happner_user_management.controller('group-edit', function ($scope, $modalInstance, editing, control, happnerAngularClient, notify) {

  $scope.editing = editing;
  $scope.control = control;

  $scope.permissions = {method:[], event:[]};

  happnerAngularClient.networkManager.getPermissions({}, function(e, permissions){

  	if (e) return notify('failed to get permissions', 'danger'); 

  	for (var permissionPath in permissions){
  		
  	}

  });

  $scope.ok = function () {

  	if (editing._store){
  		notify('updating...');
		happnerAngularClient.groupManager.update({data:angular.toJson($scope.editing)}, function(e, response){
			if (e) return notify('failed to update', 'danger'); 

			$modalInstance.close(response);
		});
	}else{
		notify('creating...');
		happnerAngularClient.groupManager.create({data:angular.toJson($scope.editing)}, function(e, response){
			if (e) return notify('failed to create', 'danger'); 

			$modalInstance.close(response);
		});
	}

  };

  $scope.cancel = function () {
    $modalInstance.dismiss('cancel');
  };

});


happner_user_management.controller('group', 
	['$scope', 
	'$modal', 
	'happnerAngularClient',
	'$rootScope',
	function($scope, $modal, happnerAngularClient, $rootScope) {
			
		$scope.control={	
							header:'groups', 
							filter:'', 
							icon:'group', 
							edit:{
								template:'partials/group-edit.html',
								title:'edit group'
							}
						};	

		$scope.searched = {};

		$scope.searched.items = [
			{name:'admin', network:'network', permissions:['*'], description:'the default admin group for this mesh'}
		];

		$scope.searchItems = function(){

			console.log('searching', $scope.control.filter);

			happnerAngularClient.groupManager.list({name:$scope.control.filter}, function(e, groups){

				if (e) return; //TODO to what? to woo?

				$scope.searched.items = groups;
				$scope.$apply();
			});

		}

		$scope.open = function (size) {

		    var modalInstance = $modal.open({
		      animation: $scope.animationsEnabled,
		      templateUrl: 'crudEdit.html',
		      controller: 'group-edit',
		      size: size,
		       resolve: {
		        editing: function () {
		          	return $scope.editing;
		        },
		        control: function(){
		        	return $scope.control;
		        },
		        happnerAngularClient: function(){
		        	return happnerAngularClient;
		        },
		        notify:function(){
		        	return $rootScope.notify;
		        }
		      }
		    });

		    modalInstance.result.then(function (editedItem) {

		    	$rootScope.notify('saved...', 'success');

		    }, function () {
		      
		    });
	  	};

		$scope.createItem = function(){
			$scope.editItem({});
		}

		$scope.deleteItem = function(id){

			console.log('delete item', id);
		}

		$scope.editItem = function(item){
			$scope.editing = item;
			$scope.open('lg');
			console.log('edit item', item);
		}

		$scope.animationsEnabled = true;

	  	
	}]
);
