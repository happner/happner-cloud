happner_user_management.controller('user-edit', function ($scope, $modalInstance, editing, control, happnerAngularClient, notify) {

  $scope.editing = editing;
  $scope.control = control;

  $scope.groups = [];

  $scope.toggleGroup = function(group){
  	group.member = !group.member;
  }

  happnerAngularClient.groupManager.list({}, function(e, groups){

  	if (e) return notify('failed to get groups', 'danger'); 

  	console.log('got groups', groups);

  	groups.map(function(group){
  		
  		var group = JSON.parse(JSON.stringify(group));

  		editing.groups.map(function(userGroup){

  			if (userGroup == group.name)
  				group.member = true;

  		});

  		$scope.groups.push(group);

  	});

  	console.log('enriched', $scope.groups);

  	$scope.$apply();

  });

  $scope.ok = function () {

  	if (editing._store){
  		notify('updating...');
		happnerAngularClient.userManager.update({data:angular.toJson($scope.editing)}, function(e, response){
			if (e) return notify('failed to update', 'danger'); 

			$modalInstance.close(response);
		});
	}else{
		notify('creating...');
		happnerAngularClient.userManager.create({data:angular.toJson($scope.editing)}, function(e, response){
			if (e) return notify('failed to create', 'danger'); 

			$modalInstance.close(response);
		});
	}

  };

  $scope.cancel = function () {
    $modalInstance.dismiss('cancel');
  };

});


happner_user_management.controller('user', 
	['$scope', 
	'$modal', 
	'happnerAngularClient',
	'$rootScope',
	function($scope, $modal, happnerAngularClient, $rootScope) {
			
		$scope.control={	
							header:'users', 
							filter:'', 
							icon:'user', 
							edit:{
								template:'partials/user-edit.html',
								title:'edit user'
							}
						};	

		$scope.searched = {};

		$scope.searched.items = [
			//{name:'admin', network:'network', permissions:['*'], description:'the default admin user for this mesh'}
		];

		$scope.searchItems = function(){

			console.log('searching', $scope.control.filter);

			happnerAngularClient.userManager.list({name:$scope.control.filter}, function(e, users){

				if (e) return; //TODO to what? to woo?

				console.log('got searched: ' ,users);

				$scope.searched.items = users;
				$scope.$apply();
			});

		}

		$scope.open = function (size) {

		    var modalInstance = $modal.open({
		      animation: $scope.animationsEnabled,
		      templateUrl: 'crudEdit.html',
		      controller: 'user-edit',
		      size: size,
		       resolve: {
		        editing: function () {
		          	return $scope.editing;
		        },
		        control: function(){
		        	return $scope.control;
		        },
		        happnerAngularClient: function(){
		        	return happnerAngularClient;
		        },
		        notify:function(){
		        	return $rootScope.notify;
		        }
		      }
		    });

		    modalInstance.result.then(function (editedItem) {

		    	$rootScope.notify('saved...', 'success');

		    }, function () {
		      
		    });
	  	};

		$scope.createItem = function(){
			$scope.editItem({});
		}

		$scope.deleteItem = function(id){

			console.log('delete item', id);
		}

		$scope.editItem = function(item){
			$scope.editing = item;
			$scope.open('lg');
			console.log('edit item', item);
		}

		$scope.animationsEnabled = true;

	  	
	}]
);
