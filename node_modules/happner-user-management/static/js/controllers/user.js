happner_user_management.controller('user-edit', function ($scope, $modalInstance, editing, control) {

  $scope.editing = editing;
  $scope.control = control;

  $scope.ok = function () {
    $modalInstance.close($scope.editing);
  };

  $scope.cancel = function () {
    $modalInstance.dismiss('cancel');
  };
});


happner_user_management.controller('user', 
	['$scope', 
	'$modal', 
	'happnerAngularClient',
	function($scope, $modal, happnerAngularClient) {
			
		$scope.control={
						header:'users', 
						filter:'', 
						icon:'user', 
						edit:{
							template:'partials/user-edit.html',
							title:'edit user'
						}
					};	

		$scope.searched = {};

		$scope.searched.items = [
			{name:'admin', network:'network', permissions:['*'], description:'the default admin user for this mesh'}
		];

		$scope.searchItems = function(){

			console.log('searching', $scope.control.filter);

			happnerAngularClient.userManager.list({name:$scope.control.filter}, function(e, users){

				if (e) return; //TODO to what? to woo?

				$scope.searched.items = users;
				$scope.$apply();
			});

		}

		$scope.open = function (size) {

		    var modalInstance = $modal.open({
		      animation: $scope.animationsEnabled,
		      templateUrl: 'crudEdit.html',
		      controller: 'user-edit',
		      size: size,
		       resolve: {
		        editing: function () {
		          	return $scope.editing;
		        },
		        control: function(){
		        	return $scope.control;
		        }
		      }
		    });

		    modalInstance.result.then(function (editedItem) {
		      $scope.editing = editedItem;
		    }, function () {
		      
		    });
	  	};

		$scope.createItem = function(){
			$scope.editItem({});
		}

		$scope.deleteItem = function(id){

			console.log('delete item', id);
		}

		$scope.editItem = function(item){
			$scope.editing = item;
			$scope.open('lg');
			console.log('edit item', item);
		}

		$scope.animationsEnabled = true;

	  	
	}]
);
