module.exports = GroupManager;

function GroupManager() {}

GroupManager.prototype.PATH_GroupManager = '/HAPPNER-DTA/NETWORK/GROUP'; //permissions changed
GroupManager.prototype.PATH_SD_UPDATE = '/HAPPNER-EVT/NETWORK/SD_UPDATE'; //security directory update


GroupManager.prototype.create = function($happn, params, callback) {
	
	var name = params.name; // Becomes the key. (Using a natural keys approach) 
	var description = params.description;

	try{

	}catch(e){
		callback(e);
	}

}

GroupManager.prototype.delete = function($happn, params, callback) {

	var name = params.name; // (KEY) The group being deleted

	try{

	}catch(e){
		callback(e);
	}
  
}

GroupManager.prototype.update = function($happn, params, callback) {

	var name = params.name; // (KEY) The group being modified
	var description = params.description; // can change description. not name

	try{

	}catch(e){
		callback(e);
	}

}

GroupManager.prototype.addPermissions = function($happn, params, callback){

	var name = params.name;				// (KEY) The group being modified

	var groups = params.groups;		// List (array) of groups whose permissions should be
																// inherited by this group.
																// 
																// groups = [{name: '..', network: '..'}, ...]

	var methods = params.methods;	// List (array) of paths to include as accessable to this group
																// 
																// methods = [{path: '/path/2', permit: 'R-X'}, ...]

	var events = params.events;   // List (array) of events to include as accessable to this group
																//
																// events = [{path: '/path/', 'permit: 'R--'}, ...]

	try{

	}catch(e){
		callback(e);
	}

}

GroupManager.prototype.removePermissions = function($happn, params, callback){

	var name = params.name;
	var groups = params.groups; // same as for .addPermissions()
	var methods = params.methods; // [{path: '/path/'}, ...]
	var events = params.events;

	try{

	}catch(e){
		callback(e);
	}

}

GroupManager.prototype.clone = function($happn, params, callback){

	var name = params.name;

	try{

	}catch(e){
		callback(e);
	}

}

GroupManager.prototype.__cache = null;
GroupManager.prototype.list = function($happn, params, callback){

	var name = params.name; // optional (to list only one)

	var adminMethods = {};
	adminMethods['/' + $happn._mesh.config.name + '/*'] = 'RWX';

	var adminEvents = {};
	adminEvents['/' + $happn._mesh.config.name + '/*'] = 'RWX';

	var exampleMethods = {
		'/happner-cloud/serverroom/cabinet2/aircon/runDiagnostics': 'R-X'
	};

	var exampleEvents = {
		'/happner-cloud/serverroom/cabinet2/sensors/overheating': 'R--'
	};

	var groups = {
		admin: {
			name: 'admin',
			description: 'Builtin admin group',
			type: 'builtin',
			network: '/OEM/company/plant/' + $happn._mesh.config.name,
			methods: adminMethods,
			events: adminEvents,
		},
		example: {
			name: 'example',
			description: 'Exmple group.',
			type: 'configured', // created by ui
			network: '/OEM/company/plant/' + $happn._mesh.config.name,
			methods: exampleMethods,
			events: exampleEvents
		}
	}

	try{

		if (name) callback(null, [groups[name]]);
		return callback(null, Object.keys(groups).map(function(name) {
			return groups[name];
		}));

	}catch(e){
		callback(e);
	}

}

GroupManager.prototype.__refreshCache = function($happn, params, callback){

	try{

		

		if (callback) callback();
	}catch(e){
		$happn.log.error('error refreshing GroupManager cache', e);
		if (callback) callback(e);
	}

}

GroupManager.prototype.start = function($happn, params, callback){

	try{

		var _this = this;

		_this.__refreshCache($happn, {}, function(e){

			if (e) return callback(e);

			$happn.event.happnerSecurityNetwork.on('NETWORK-EVT', function(){
				_this.__refreshCache($happn, {});
			}, callback);

		});

	}catch(e){
		callback(e);
	}

	
}
