module.exports = NetworkManager;

function NetworkManager() {}

NetworkManager.prototype.PATH_PERMISSION = '/HAPPNER-DTA/NETWORK/PERMISSION'; //permissions changed
NetworkManager.prototype.PATH_SD_UPDATE = '/HAPPNER-EVT/NETWORK/SD_UPDATE'; //security directory update

NetworkManager.prototype.__cachedPermissions = null;
NetworkManager.prototype.getPermissions = function($happn, params, callback) {

	try{

		if (!params)
		params = {};

		if (!this.__cachedPermissions || params.nocache){

			var _this = this;

			var permissions = {
				'*':{
					description:'anything on this mesh'
				}
			};

			for (var key in $happn._mesh.exchange){
				permissions[key] = {
					//TODO - what do we want to put in here
				};
			}

			this.__cachedPermissions = permissions;

			console.log(this.__cachedPermissions);
		}
		
		callback(null, this.__cachedPermissions)

	}catch(e){
		callback(e);
	}

}

NetworkManager.prototype.__listening = false;
NetworkManager.prototype.listenSecurityDirectory = function($happn, params, callback) {

	try{

		if (!this.__listening){

			var _this = this;

			$happn.data.on(_this.PATH_SD_UPDATE, {}, 
			function(data){
				cachedPermissions = false;
				$happn.emit('NetworkManager-EVT', {data:data});
			}, 
			function(e){
				if (e) return callback(e);	
				this.__listening == true;
				callback();
			})
		}else
			callback();

	}catch(e){
		callback(e);
	}

}

NetworkManager.prototype.start = function($happn, params, callback){

	try{

		var _this = this;

		_this.getPermissions($happn, {nocache:true}, function(e, permissions){

			if (e) return callback(e);

			_this.listenSecurityDirectory($happn, {}, function(e, response){

				if (e) return callback(e);

				callback();
			});

			callback();
		});

	}catch(e){
		callback(e);
	}


	
}
