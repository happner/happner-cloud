module.exports = UserManager;

function UserManager() {}

var lastId = 1;

var _users = { // could put this into the start method to use $happn vars
	admin: {
		name: 'admin',
		userType: 'builtin',
		network: '/OEM/company/plant/' + 'happner-cloud',
		groups: [
			'admin'
		],
		_store:{
			id:'829827892789278927983'
		}
	}
};

UserManager.prototype.create = function($happn, params, callback) {

	var name = params.data.name;  // Becomes the key. (Using a natural keys approach)
	if (_users[name]) return callback(new Error('User already exists.'));
	var user = {
		name: name,
		userType: 'configured',
		network: '/OEM/company/plant/' + $happn._mesh.config.name,
		groups: [],
		// methods: [],
		// events: [],
		_store:{}
	}

	lastId++;

	//this is a mockery of the actual save
	user._store.id = lastId;

	_users[name] = user;

	//console.log('user create happened,calling back');

	callback(null, user);


	// var response = JSON.parse(JSON.stringify(params.UserManager))
 //  	callback(null, params.UserManager);
}

UserManager.prototype.delete = function($happn, params, callback) {
	var name = params.name; // (KEY) The user to be deleted
	try{
		if (params.name == 'admin') return callback(new Error('Not permitted'));
		if (_users[name]) {
			delete _users[name];
			callback(null, 1);
		} else {
			callback(null, 0);
		}
	}catch(e){
		callback(e);
	}
}

UserManager.prototype.update = function($happn, params, callback) {
  callback(null);
}

UserManager.prototype.addGroups = function($happn, params, callback){

	var name = params.name; // user to get new groups
	var groups = params.groups; // ['group1', ...] to add

	var user = _users[name];
	if (!user) return callback(new Error('No such user'));
	var count = 0;
	groups.forEach(function(group) {
		if (user.groups.indexOf(group) >= 0) return;
		count++;
		user.groups.push(group);
	});
	callback(null, count);
}

UserManager.prototype.removeGroups = function($happn, params, callback){

	var name = params.name; // user to get new groups
	var groups = params.groups; // ['group1', ...] to remove
	
	var user = _users[name];
	if (!user) return callback(new Error('No such user'));
	var count = user.groups.length;
	groups.forEach(function(remove) {
		user.groups = user.groups.filter(function(group) {
			return group != remove;
		});
	});

	callback(null, count - user.groups.length);
}

UserManager.prototype.clone = function($happn, params, callback){

	var sourceName = params.sourceName;
	var name = params.name;

	try{

		if (!_users[sourceName]) return new callback(new Error('No source user'));
		if (_users[name]) return new callback(new Error('Cannot overwrite existing user'));

		var user = JSON.parse(JSON.stringify(_users[sourceName]));
		user.name = name;
		user.userType = 'configured';
		_users[name] = user;
		callback(null, user);
	
	}catch(e){
		callback(e);
	}
}

UserManager.prototype.list = function($happn, params, callback){

	var name = params.name;

	try{

		if (name) callback(null, [_users[name]]);
		return callback(null, Object.keys(_users).map(function(name) {
			return _users[name];
		}));

	}catch(e){
		callback(e);
	}

}

UserManager.prototype.__refreshCache = function($happn, params){

	try{
		
	}catch(e){
		
	}

}

UserManager.prototype.start = function($happn, params, callback){

	try{

		var _this = this;

		$happn.event.happnerSecurityNetwork.on('NETWORK-EVT', function(){
			_this.__refreshCache($happn, {});
		}, callback);

	}catch(e){
		callback(e);
	}

	
}






