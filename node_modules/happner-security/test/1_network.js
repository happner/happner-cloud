

var expect = require('expect.js');
var sep = require('path').sep;
var libFolder = __dirname + sep + 'lib' + sep;
var _const = require('../lib/_constants');

describe('network component tests', function() {

  require('./lib/0-hooks')();
  var mesh;
  var config = require('../test/lib/0-config.js');

  it('starts a local mesh', function(done) {

    this.timeout(10000);

    // created in lib/0-hooks.js
    mesh = this.Mesh();
   
    mesh.initialize(config, function(err) {

      if (err) {
        console.log('failure in init')
        console.log(err.stack)
      };

      done(err);

    });

  });

  it('lists all possible permissions', function(done) {
    var _this = this;

    mesh.exchange.happnerSecurityNetwork.getPermissions({}, function(e, permissions){

      if (e) return done(e);

      expect(Object.keys(permissions.events).length > 0).to.be(true);
      expect(Object.keys(permissions.methods).length > 0).to.be(true);
      expect(Object.keys(permissions.data).length > 0).to.be(true);

      done();

    });
    
  });

   it('lists only method permissions', function(done) {
    var _this = this;

    mesh.exchange.happnerSecurityNetwork.getPermissions({"group":"methods"}, function(e, permissions){

      if (e) return done(e);

      expect(Object.keys(permissions).length > 0).to.be(true);
      
      done();

    });
    
  });

  it('lists the security permissions, spot check', function(done) {
    var _this = this;

    mesh.exchange.happnerSecurityNetwork.getPermissions({}, function(e, permissions){

      if (e) return done(e);

      expect(permissions.methods['/happner-cloud/happnerSecurityNetwork/getPermissions'].type == 'exchange').to.be(true);
      expect(permissions.methods['/happner-cloud/happnerSecurityNetwork/listenSecurityDirectory'].type == 'exchange').to.be(true);

      done();

    });
    
  });


  it('notifies the local mesh if something has changed', function(done) {
    var _this = this;

    mesh.event.happnerSecurityNetwork.on(_const.CHANNEL.LOCAL_NETWORK, function(data){
       expect(data.payload.data.name == 'some test data').to.be(true);
      done();
    }, function(e){
      if (e) return done(e);

      mesh.exchange.happnerSecurityNetwork.securityEvent({'name':'some test data'}, function(e){
        if (e) return done(e);
      });

    });
    
  });

});
